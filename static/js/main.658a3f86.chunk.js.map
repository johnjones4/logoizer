{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","width","height","inset","event","_this2","reader","FileReader","onload","img","Image","renderImage","src","target","result","readAsDataURL","files","canvas","refs","ctx","getContext","prevProps","prevState","snapshot","clearRect","fillStyle","fillRect","targetWidth","targetHeight","xInset","yInset","drawImage","a","document","createElement","href","toDataURL","replace","setAttribute","body","appendChild","click","_this3","react_default","className","ref","id","htmlFor","type","onChange","imageUploaded","value","setState","onClick","download","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.658a3f86.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      width: 360,\n      height: 240,\n      inset: 30\n    }\n  }\n\n  imageUploaded (event) {\n    const reader = new FileReader();\n    reader.onload = event => {\n      const img = new Image()\n      img.onload = () => {\n        this.img = img\n        this.renderImage()\n      }\n      img.src = event.target.result\n    }\n    reader.readAsDataURL(event.target.files[0])\n  }\n\n  componentDidMount () {\n    this.canvas = this.refs.canvas\n    this.ctx = this.canvas.getContext(\"2d\")\n    this.canvas.width = this.state.width\n    this.canvas.height = this.state.height\n    this.renderImage()\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    this.renderImage()\n  }\n\n  renderImage () {\n    this.canvas.width = this.state.width\n    this.canvas.height = this.state.height\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.ctx.fillStyle = '#ffffff'\n    this.ctx.fillRect(0, 0, this.state.width, this.state.height)\n    // this.ctx.fillStyle = '#000000'\n    // this.ctx.fillRect(0, 0, this.state.width, this.state.height)\n    // this.ctx.fillStyle = '#ffffff'\n    // this.ctx.fillRect(this.state.inset, this.state.inset, this.state.width - (this.state.inset * 2), this.state.height - (this.state.inset * 2))\n\n    if (this.img) {\n      let targetWidth = null\n      let targetHeight = null\n      if (this.canvas.width > this.canvas.height || this.img.height > this.img.width) {\n        targetHeight = this.state.height - (this.state.inset * 2)\n        targetWidth = (targetHeight / this.img.height) * this.img.width\n      } else {\n        targetWidth = this.state.width - (this.state.inset * 2)\n        targetHeight = (targetWidth / this.img.width) * this.img.height\n      }\n      const xInset = (this.state.width - targetWidth) / 2\n      const yInset = (this.state.height - targetHeight) / 2\n\n      this.ctx.drawImage(this.img, 0, 0, this.img.width, this.img.height, xInset, yInset, targetWidth, targetHeight)\n    }\n  }\n\n  download () {\n    const a = document.createElement('a')\n    a.href = this.canvas.toDataURL('image/png').replace(\"image/png\", \"image/octet-stream\")\n    a.setAttribute('download', 'logo.png')\n    document.body.appendChild(a)\n    a.click()\n  }\n\n  render () {\n    return (\n      <div className='App container'>\n        <h1 className='text-center'>Logoizer</h1>\n        <canvas ref='canvas' id='canvas'></canvas>\n        <div className='form'>\n          <div className='form-group'>\n            <label htmlFor='image'>Image</label>\n            <input type='file' className='form-control' id='image' onChange={(event) => this.imageUploaded(event)} /> \n          </div>\n          <div className='form-group'>\n            <label htmlFor='width'>Target Width</label>\n            <input value={this.state.width} type='number' className='form-control' id='width' onChange={(event) => this.setState({width: event.target.value})} /> \n          </div>\n          <div className='form-group'>\n            <label htmlFor='height'>Target Height</label>\n            <input value={this.state.height} type='number' className='form-control' id='height' onChange={(event) => this.setState({height: event.target.value})} /> \n          </div>\n          <div className='form-group'>\n            <label htmlFor='inset'>Image Inset</label>\n            <input value={this.state.inset} type='number' className='form-control' id='inset' onChange={(event) => this.setState({inset: event.target.value})} /> \n          </div>\n          <button className='btn btn-primary' onClick={() => this.download()}>Download</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}